import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:1.2.1'
        classpath "org.openapitools:openapi-generator-gradle-plugin:$openApiGeneratorVersion"
    }
}
plugins {
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'java'
    id 'jacoco'
    id 'com.palantir.docker-compose' version '0.35.0'
}
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.0"
        mavenBom "org.springframework.modulith:spring-modulith-bom:1.1.2"

    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    acceptanceImplementation {
        extendsFrom testImplementation
    }
    apiDef {
        transitive = false
    }
}


repositories {
    mavenLocal()
    maven { url "https://repo.spring.io/snapshot" }
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(javaVersion)
    }
}

jar {
    enabled = false
}

def openApiClientDir = "$buildDir/generated/openapi/client".toString()
def openApiServerDir = "$buildDir/generated/openapi/server".toString()
sourceSets {
    main {
        java.srcDir "src/main/java"
        java.srcDir "${openApiServerDir}/src/main/java"
        resources.srcDir "src/main/resources"
    }
    test {
        java.srcDir "src/test/java"
        resources.srcDir "src/test/resources"
    }
    acceptance {
        java.srcDir 'src/acceptance/java'
        java.srcDir "${openApiClientDir}/src/java"
        compileClasspath += sourceSets.main.output + configurations.testCompileClasspath + configurations.compileClasspath
        runtimeClasspath += output + compileClasspath
    }
}

dependencies {
    apiDef "ro.kudostech:ping-patrol-rest-service-api:$pingPatrolRestApiVersion@yaml"
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.modulith:spring-modulith-starter-core'
    implementation 'org.springframework.modulith:spring-modulith-starter-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation group: 'org.keycloak', name: 'keycloak-admin-client', version: '23.0.5'
    runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'

    implementation group: 'io.swagger.core.v3', name: 'swagger-annotations', version: '2.2.20'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.3.0'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation group: 'org.mapstruct', name: 'mapstruct', version: '1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.14.0'
    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.4'



    runtimeOnly group: 'org.mariadb.jdbc', name: 'mariadb-java-client', version: '3.3.2'

    // Test
    testImplementation 'org.springframework.modulith:spring-modulith-starter-test'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation(platform("org.junit:junit-bom:5.10.1"))
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation 'com.h2database:h2:2.2.224'


    // Acceptance tests
    acceptanceImplementation('org.springframework.boot:spring-boot-starter-test')
    acceptanceImplementation 'com.h2database:h2:2.2.224'
    acceptanceImplementation 'io.rest-assured:rest-assured'
    acceptanceImplementation 'io.cucumber:cucumber-java:7.15.0'
    acceptanceImplementation 'io.cucumber:cucumber-junit:7.15.0'
    acceptanceImplementation 'io.cucumber:cucumber-spring:7.15.0'
    acceptanceImplementation 'org.awaitility:awaitility:4.2.0'
    acceptanceImplementation 'com.auth0:java-jwt:4.4.0'
    acceptanceImplementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
    acceptanceImplementation 'javax.validation:validation-api:2.0.1.Final'
    acceptanceImplementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    acceptanceImplementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.3.1'
    acceptanceImplementation group: 'org.bitbucket.b_c', name: 'jose4j', version: '0.9.4'

    acceptanceImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8-standalone', version: '3.0.1'


}
processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
processTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
processAcceptanceResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
test {
    useJUnitPlatform()
    description = "Runs all unit tests definied via JUnit."
    group = "testing"
}
tasks.withType(Test).configureEach {
    testLogging.showStandardStreams = true
}
tasks.register('acceptanceTest', Test) {
    description = "Runs the acceptance tests defined via Cucumber"
    group = "testing"
    testClassesDirs = sourceSets.acceptance.output.classesDirs
    classpath = sourceSets.acceptance.runtimeClasspath
    finalizedBy "jacocoAcceptanceTestReport"
}

jacoco {
    toolVersion = "0.8.11"
}
tasks.withType(JacocoReport).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
}
jacocoTestReport {
    description = "Generates jacoco code coverage report for unit test tasks."
    group = "reporting"
    executionData test
    reports {
        xml.required = true
        html.required = true
    }
}
tasks.register('jacocoAcceptanceTestReport', JacocoReport) {
    description = "Generates jacoco code coverage report for acceptance test tasks."
    group = "reporting"
    executionData acceptanceTest
    sourceSets sourceSets.main
    reports {
        xml.required = true
        html.required = true
    }
}
tasks.register('allTestReport', JacocoReport) {
    description = "Generates jacoco code coverage report for unit, integration und acceptance test tasks."
    group = "reporting"
    executionData test, acceptanceTest
    sourceSets sourceSets.main
    reports {
        xml.required = true
        html.required = true
    }
}
tasks.register('copyOpenApiDef', Copy) {
    dependsOn configurations.apiDef
    delete "spec/external/"
    from configurations.apiDef.singleFile.absolutePath

    include "**/*.yaml", "**/*.yml"
    rename("ping-patrol-rest-service-api-" + project.property("pingPatrolRestApiVersion") + ".yaml", "ping-patrol-rest-service-api.yaml")
    includeEmptyDirs = false
    into "$projectDir/spec/external/"
}
tasks.register('buildJavaClient', GenerateTask) {
    group 'openapi tools'
    generatorName = "java"
    inputSpec = "$projectDir/spec/external/ping-patrol-rest-service-api.yaml".toString()
    outputDir = openApiClientDir
    apiPackage = 'ro.kudostech.pingpatrol.api.client'
    modelPackage = 'ro.kudostech.pingpatrol.api.client'
    configOptions = [
            artifactDescription    : "generated organizationApi",
            artifactId             : "organizationApi",
            artifactUrl            : "https://bitbucket.interhyp.de/bitbucket/projects/BACKEND/repos/organization-api/",
            hideGenerationTimestamp: "true",
            library                : "resttemplate",
            openApiNullable        : "false",
            serializableModel      : "true",
            sourceFolder           : "src/java",
            useBeanValidation      : "true",
    ]
}


tasks.register('buildJavaServer', GenerateTask) {
    group 'openapi tools'
    generatorName = "spring"
    inputSpec = "$projectDir/spec/external/ping-patrol-rest-service-api.yaml".toString()
    outputDir = openApiServerDir
    apiPackage = 'ro.kudostech.pingpatrol.api.server'
    modelPackage = 'ro.kudostech.pingpatrol.api.server.model'

    // Check docs for all options: https://openapi-generator.tech/docs/generators/spring/
    configOptions = [
            dateLibrary                   : "java8",
            delegatePattern               : "false",
            enumPropertyNaming            : "UPPERCASE",
            exceptionHandler              : "false",
            generateBuilders              : "false",
            gradleBuildFile               : "false",
            hideGenerationTimestamp       : "true",
            interfaceOnly                 : "true",
            interfacePrefix               : "false",
//            library                       : "spring-cloud",
            library                       : "spring-boot",
            openApiNullable               : "false",
            removeEnumValuePrefix         : "false",
            removeOperationIdPrefix       : "true",
            skipDefaultInterface          : "true",
            useSpringBoot3                : "true",
            useBeanValidation             : "true",
            useTags                       : "true",
            // @lombok.Generated makes jacoco ignore the generated classes. The @Generated annotation added by openapi does not have the correct retention
            // period for this. See also https://www.baeldung.com/jacoco-report-exclude
            additionalModelTypeAnnotations: "@lombok.Generated",
            additionalEnumTypeAnnotations : "@lombok.Generated",
    ]

}

//tasks.register('openapiPackageInfoConfig') {
tasks.register('openapiPackageInfoConfig') {
    dependsOn 'buildJavaServer'
    doLast {
        // Create package-info files for server package
        def serverPackagePath = "${openApiServerDir}/src/main/java/ro/kudostech/pingpatrol/api/server"
        def serverPackageInfo = """
    @org.springframework.modulith.NamedInterface("apiserver")
    package ro.kudostech.pingpatrol.api.server;
    """
        File extraFolder = new File("${serverPackagePath}")
        if (!extraFolder.exists()) {
            extraFolder.mkdirs()
        }
        new File("${serverPackagePath}/package-info.java").text = serverPackageInfo

        // Create package-info files for server model package
        def modelPackagePath = "${openApiServerDir}/src/main/java/ro/kudostech/pingpatrol/api/server/model"
        def modelPackageInfo = """
    @org.springframework.modulith.NamedInterface("apiservermodel")
    package ro.kudostech.pingpatrol.api.server.model;
    """
        extraFolder = new File("${modelPackagePath}")
        if (!extraFolder.exists()) {
            extraFolder.mkdirs()
        }
        new File("${modelPackagePath}/package-info.java").text = modelPackageInfo
    }
}

dockerCompose {
    dockerComposeFile "/${projectDir}/src/main/resources/scripts/local-setup/docker-compose.yml"
}

bootRun {
    jvmArgs=["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"]
}

build.dependsOn(acceptanceTest)
compileJava.dependsOn buildJavaServer
buildJavaServer.dependsOn copyOpenApiDef
buildJavaServer.finalizedBy openapiPackageInfoConfig

buildJavaClient.dependsOn copyOpenApiDef
compileAcceptanceJava.dependsOn buildJavaClient
acceptanceTest.mustRunAfter(test)
acceptanceTest.finalizedBy jacocoAcceptanceTestReport

test.finalizedBy jacocoTestReport



